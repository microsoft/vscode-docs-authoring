"use-strict";

import { readdir, stat, unlinkSync } from "fs";
import { homedir } from "os";
import { join } from "path";
import * as WebRequest from 'web-request';
import { displayTemplates } from "../controllers/quick-pick-controller";
import { postWarning, showStatusMessage } from "../helper/common";

export const docsAuthoringDirectory = join(homedir(), "Docs Authoring");
export const templateDirectory = join(docsAuthoringDirectory, "Templates");

// download a copy of the template repo to the "docs authoring" directory.  no .git-related files will be generated by this process.
export async function downloadRepo() {
    const download = require("download-git-repo");
    const templateRepo = "MicrosoftDocs/content-templates";
    download(templateRepo, docsAuthoringDirectory, (err) => {
        if (err) {
            postWarning(err ? `Error: Cannot connect to ${templateRepo}` : "Success");
            showStatusMessage(err ? `Error: Cannot connect to ${templateRepo}` : "Success");
        } else {
            displayTemplates();
            logRepoData();
        }
    });
}

// the download process is on a repo-level so this function will be used to delete any files pulled down by the download process.
export function cleanupDownloadFiles(templates?: boolean) {
    let workingDirectory: string;

    if (templates) {
        workingDirectory = templateDirectory;
    } else {
        workingDirectory = docsAuthoringDirectory;
    }

    readdir(workingDirectory, (err, files) => {
        files.forEach((file) => {
            const fullFilePath = join(workingDirectory, file);
            stat(join(fullFilePath), (error, stats) => {
                if (stats.isFile()) {
                    unlinkSync(fullFilePath);
                }
                if (error) {
                    showStatusMessage(`Error: ${error}`);
                }
            });
        });
    });
}

export async function logRepoData() {
    const repoUrl = `https://github.com/MicrosoftDocs/content-templates`;
    const result = await WebRequest.get(repoUrl);
    showStatusMessage(`Content-templates repo URL and http response: ${repoUrl}, ${result.statusCode}`);
    showStatusMessage(`Local template directory: ${templateDirectory}`);
}
